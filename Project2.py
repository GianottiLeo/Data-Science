# -*- coding: utf-8 -*-
"""Ex2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QzOPddaNLWshTlDXkD2XBDHq-ltf2Xh2

# SCC0275: Introdução a Ciência de Dados - 2o Semestre de 2021
# SCC0275 - Exercício 2

### Profa. Roseli A. F. Romero

### Monitor: Kenzo Sakiyama

Nro do grupo:

Alunos:


1.   Caio Henrique Mendes Schiavo 11810602

2.   Leo Gianotti Andrade Dos Santos 10733900

## Dados unidimensionais

Suponha dois conjuntos de dados, que representam as notas finais em uma dada disciplina de duas salas com 100 alunos. Os dados foram armazenados nos arquivos "notas_salas01.txt" e "notas_salas02.txt".

Imagine que uma pessoa deseje comparar o desempenho das salas de aula. Considera-se que, **quanto mais alunos foram aprovados, melhor o desempenho da sala**. Suponha que para ser aprovado, um aluno deve ter nota maior que 50.

Como medida inicial de desempenho, essa pessoa calculou a média dos dados através do código abaixo:
"""

import numpy as np
import pandas as pd
from scipy import stats

salas = []
salas.append(np.loadtxt("notas_sala01.txt"))
salas.append(np.loadtxt("notas_sala02.txt"))

for i in range(0,2):
    print("--- Sala: %d ---" % (i+1))
    print("Média: %f" % np.mean(salas[i]))

"""**Com base na média, a pessoa concluiu que a sala 1 obteve um melhor desempenho que a sala 2.**

### Questão 01.
Demonstre o porquê dessa conclusão estar equivocada.
   - Sugestão: Transforme as estruturas `salas[0]` e `salas[1]` em estruturas do tipo `DataFrame` da biblioteca **pandas** e utilize as funções de histograma e/ou boxplot.
"""

sala1 = pd.DataFrame(np.loadtxt("notas_sala01.txt"))

sala2 = pd.DataFrame(np.loadtxt("notas_sala02.txt"))
sala1["sala1"]= sala1
sala1["sala2"]= sala2

salas = sala1[sala1.columns.difference([0])]
salas.boxplot()

"""### Questão 02.
Calcule o número de aprovados em cada uma das salas.
"""

def num_alunos_aprovados(media=50):
  aprovados1 = []
  aprovados2 = []
  for i in salas['sala1']:
    if i >= media:
      aprovados1.append(i)
  for i in salas['sala2']:
    if i >= media:
      aprovados2.append(i)
  print(f'O número de aprovados na sala 1 é {len(aprovados1)} e o da sla 2 é {len(aprovados2)}')
num_alunos_aprovados()

"""### Base Futebol

Suponha que uma emissora de televisão te contratou para analisar o perfil dos jogadores do futebol europeu para que os narradores possam dizer estatísticas sobre eles durante os jogos.

Os dados estão numa planilha chamada `players_sampled.csv`, onde cada linha contém os dados de um jogador e cada coluna possui um atributo. Essa base foi adaptada do site de competições de ciência de dados chamado [Kaggle](*https*://www.kaggle.com/hugomathien/soccer).
"""

# Carregando a base
df = pd.read_csv('/content/players_sampled.csv')
df.info()

df.head(10)

"""### Questão 03
Para cada atributo da base, identifique quais são categoricos/nominais, ordinais, intervalares e racionais. (Não precisa ser em código)

ID: Nominal

player api id: Nominal

player_name: Nominal

player fifa api id: Nominal

birthday: Ordinal

height: Racional

weight: Racional

### Questão 4

Formule 3 hipóteses sobre a base ou seus atributos que possam ser verificadas com os conceitos apresentados na disciplina.

Ex: O atributo altura tem mais valores abaixo da média (obliquidade negativa)


-   Hipótese 1: O atributo peso tem obliquidade 0

-   Hipótese 2: O atributo peso tem curtose 0

-   Hipótese 3: O atributo altura tem curtose 0

### Questão 5

Verifique se suas hipóteses são verdadeiras
"""

def h1(df):
  print(df.hist(column='weight'))
h1(df)
print('O atributo peso tem obliquidade 0')
def h2(df):
  print(df.hist(column='weight'))
h2(df)
print('O atributo peso tem curtose 0')
def h3(df):
  print(df.hist(column='height'))
h3(df)
print('O atributo altura não tem curtose 0')

"""### Questão 6
- Os pesos dos jogadores foram dados em libras. Transforme os pesos dos jogadores para quilos e substitua o valor antigo da coluna no DataFrame. Dica: 1 lb = 0.45359237 kg

- Crie um novo atributo chamado "age" (idade) a partir da data de nascimento do jogador. Este atributo deve ser considerado nas próximas questões. A idade deve ser um número inteiro. Bib datetime
"""

def lb_para_kg(df):
  weightkg = []
  for i in df['weight']:
    aux = i*0.45359237
    weightkg.append(round(aux,2))
  return weightkg
weightkg = lb_para_kg(df)
print(weightkg)
df['weightkg'] = weightkg
df1 = df.drop(columns=['weight'])
print(df1)

from datetime import datetime, date

born=df['birthday']

born = []
for i in df1['birthday']:
  born.append(datetime.strptime(i, "%Y-%m-%d %H:%M:%S").date())

today = date.today()

Age = []
for born in born:
  Age.append(
        today.year - born.year - ((today.month,
                                            today.day) < (born.month,
                                                          born.day)))

df1['age'] = Age
print(df1)

"""### Questão 7
Implemente a função que calcule o percetil de determinado atributo. (Atenção: As bibliotecas Numpy/Pandas possuem a função *quantile* você não deve usá-la em sua função). Os resultados também podem variar dependendo da implementação. Tente seguir a definição dos slides.
"""

def percentile(df, nome_attr, pct):
  n = len(df[f'{nome_attr}'])
  att_ord = sorted(df[f'{nome_attr}'], reverse=False)
  locqt = int(n*pct)
  print(att_ord[locqt])
percentile(df1, 'age', 0.3)

"""### Questão 08
Utilizando sua função, calcule a mediana, 1º quartil, 3º quartil do atributo altura.

**Sugestão:** compare os resultados com os mostrados pelo método *.describe* do pandas.
"""

print('25%:')
percentile(df1,'height', 0.25)
print('50%:')
percentile(df1,'height', 0.5)
print('75%')
percentile(df1,'height', 0.75)

df1.describe()

"""### Questão 09

Calcule os quatro momentos (média, variância, obliquidade e achatamento) dos atributos onde essas métricas fazem sentido.

  - Dica: Utilize as bibliotecas **numpy** para média (mean) e variância (variance) e **Scipy.stats** para obliquidade (skew) e achatamento (kurtosis).
"""

from scipy.stats import kurtosis, skew

def quatro_momentos(df, nome_attr):
  if nome_attr == "height":
    x = df[['height']]
  else:
    x = df[['weightkg']]
  print('Mean:{}'.format(np.mean(x)))
  print('Var:{}'.format(np.var(x)))
  print('kurtosis: {}'.format(kurtosis(x)))
  print('skewness: {}'.format(skew(x)))

quatro_momentos(df1,'height')

"""### Questão 10

- Calcule o histograma e o boxplot dos atributos altura, peso e idade.
- A distribuição dos atributos possui curvatura para algum lado ou são centrados?
- A partir do Boxplot, verifique se os atributos tem outliers e justifique.
"""

df10 = df1[['height', 'weightkg', 'age']]
#print(df10)

def hist(df):
  df.hist(column='height')
  df.hist(column='weightkg')
  df.hist(column='age')
def boxplot(df):
  df.boxplot()

boxplot(df10)
hist(df10)