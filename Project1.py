# -*- coding: utf-8 -*-
"""Ex1_ICD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QpH2y2sniDaOsYObNuFtaPH9N3K3r9oN

# SCC-ICMC-USP - 2o. semestre de 2021
# SCC0275.

### Profa. Roseli A. F. Romero

### Monitor: Kenzo Sakiyama

Nro do grupo: ?

Alunos:

1.   Leo Andrade nº 10733900
2.   Caio Henrique Mendes Schiavo nº 11810602

## Dados multidimensionais

#### 1. Importe as bibliotecas Numpy e Pandas e carregue o conjunto de dados Iris
"""

# Imports
import pandas as pd

# Carregando base de dados
df = pd.read_csv("/content/iris.data")

df

"""### [Sobre o Iris ](https://pt.wikipedia.org/wiki/Conjunto_de_dados_flor_Iris)
O conjunto de dados consiste em amostras de três espécies de flores Iris ( Iris setosa, Iris virginica e Iris versicolor). Quatro atributos foram medidos em cada amostra: o comprimento e a largura das sépalas e pétalas, em centímetros.

A estrutura das variáveis no arquivo é:

1. comprimento sépala em cm
2. largura sépala em cm
3. comprimento da pétala em cm
4. largura da pétala em cm
5. classe:
  - Iris Setosa
  - Iris Versicolour
  - Iris Virginica

#### 2. Coloque nomes nas colunas do DataFrame de acordo com a descrição acima
"""

def add_column_names(df):
  df_with_names = df.rename({'5.1': 'Comprimento_sepala', '3.5': 'Largura_sepala', '1.4':'Comprimento_petala', '0.2':'Largura_petala','Iris-setosa':'Classe'}, axis=1)
  return df_with_names

df1 = add_column_names(df)
print(df1)

"""#### 3. Usando Pandas, gere um histograma dos valores para cada um dos atributos (colunas)


"""

def show_histograms(df):
 hist = df.hist()
 return hist
show_histograms(df1)

"""#### 4. Mostre o histograma para cada classe de um atributo (recebido por parâmetro)

Você deverá filtrar exemplos da classe desejada antes de fazer o plot dos histogramas.

---




"""

def show_histogram_per_class(df, attr_name):
 print(df[f'{attr_name}'].hist(by=df1['Classe']))
show_histogram_per_class(df1, 'Comprimento_petala')

"""#### 5. Todas as medições foram feitas em cm, crie uma nova coluna para cada atributo com seus valores em milímetros"""

def add_mm_cols(df):
  Comp_sep_mm = df['Comprimento_sepala']*10
  df.insert(1, "Comprimento_sepala_mm", Comp_sep_mm)
  Larg_sep_mm = df['Largura_sepala']*10
  df.insert(1, 'Largura_sepala_mm', Larg_sep_mm)
  Comp_pet_mm = df['Comprimento_petala']*10
  df.insert(1, 'Comprimento_petala_mm', Comp_pet_mm)
  Larg_pet_mm = df['Largura_petala']*10
  df.insert(1, 'Largura_petala_mm', Larg_pet_mm)
add_mm_cols(df1)

"""### 6.  Conte o número de amostras por classe, retorne uma lista com 3 elementos com a contagem de cada classe

"""

Setosa = []
Versicolour= []
Virginica = []
for i in df1['Classe']:
  if i == 'Iris-setosa':
    Setosa.append(i)
  if i == 'Iris-versicolor':
    Versicolour.append(i)
  if i == 'Iris-virginica':
    Virginica.append(i)
print(f'Numero de Iris Setosas: {len(Setosa)}',f'Numero de Iris Versicolours: {len(Versicolour)}',f'Numero de Iris Virginica: {len(Virginica)}')

"""#### 7. Dado um atributo, printe qual classe possui o maior e menor valor. Exemplo (não necessáriamente correto): "A classe Iris-Setosa possui a menor medição de largura de sépala."
"""

def min_max(df, attr_name):
  minimo = min(df1[f'{attr_name}'])
  index_min = df1.index
  condition_min = df1[f'{attr_name}'] == minimo
  indices_min = index_min[condition]
  indices_list_min = indices_min.tolist()
  classe_min = df1['Classe'][indices_list_min[0]]

  maximo = max(df1[f'{attr_name}'])
  index_max = df1.index
  condition_max = df1[f'{attr_name}'] == maximo
  indices_max = index_max[condition]
  indices_list_max = indices_max.tolist()
  classe_max = df1['Classe'][indices_list_max[0]]

  print('A classe {} possui o menor {}'.format(classe_min, attr_name))
  print('A classe {} possui o maior {}'.format(classe_max, attr_name))
min_max(df1, 'Comprimento_sepala')